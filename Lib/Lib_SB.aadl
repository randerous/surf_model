package Lib_SB
public
	with Data_SB;
    
	 
    with shareData;
    with sb_controller;
    with port_struct;

	feature group  sb_api_provide
		features
			CreatePipe: feature group  port_struct::Lib_CreatePipe;
			DeletePipe: feature group  port_struct::Lib_DeletePipe;
			Subscribe: feature group  port_struct::Lib_Subscribe;
			Unsubscribe: feature group  port_struct::Lib_Unsubscribe;
			SendMsg: feature group  port_struct::Lib_SendMsg;
			RcvMsg: feature group  port_struct::Lib_RcvMsg;
	end sb_api_provide;
	
	feature group  sb_api_require
		features
			CreatePipe: feature group port_struct::Com_CreatePipe;
			DeletePipe: feature group port_struct::Com_DeletePipe;
			Subscribe: feature group port_struct::Com_Subscribe;
			Unsubscribe: feature group port_struct::Com_Unsubscribe;
			SendMsg: feature group port_struct::Com_SendMsg;
			RcvMsg: feature group port_struct::Com_RcvMsg;
	inverse of sb_api_provide
	end sb_api_require;
	
	
		
	abstract sb_lib
		features
			CreatePipe: feature group port_struct::Lib_CreatePipe;
			DeletePipe: feature group port_struct::Lib_DeletePipe;
			Subscribe: feature group port_struct::Lib_Subscribe;
			Unsubscribe: feature group port_struct::Lib_Unsubscribe;
			SendMsg: feature group port_struct::Lib_SendMsg;
			RcvMsg: feature group port_struct::Lib_RcvMsg;
			
			es_pipe: out data port Data_SB::struct.CFE_SB_PipeD_t; --PipeId = 0
			sb_pipe: out data port Data_SB::struct.CFE_SB_PipeD_t; --PipeId = 1
			evs_pipe: out data port Data_SB::struct.CFE_SB_PipeD_t; --PipeId = 2
			time_pipe: out data port Data_SB::struct.CFE_SB_PipeD_t; --PipeId = 3
			app1_pipe: out data port Data_SB::struct.CFE_SB_PipeD_t; --PipeId = 4预先分配的管道空间，提供激活字段InUse
--			es_msg: out data port Data_SB::struct.CFE_SB_Msg_t;
--			sb_msg: out data port Data_SB::struct.CFE_SB_Msg_t;
--			evs_msg: out data port Data_SB::struct.CFE_SB_Msg_t;
--			time_msg: out data port Data_SB::struct.CFE_SB_Msg_t;
        annex agree {**
--        	AppId: in data port Base_Types::Unsigned_32;
--			PipeId: in data port Base_Types::Unsigned_8;
--			Depth: in data port Base_Types::Unsigned_16;
--			PipeName: in data port Base_Types::String;
--			Valid: in data port Base_Types::Boolean;
--			Result: out data port Base_Types::Unsigned_32;
           --待改进
            eq SUCCESS: int = 0; 
            eq INVALID_PIPE: int = 2;
			eq BAD_ARGUMENT: int = 3;
			eq MAX_PIPES_MET: int = 4;
			eq PIPE_CR_ERR: int = 5;
			eq PIPENUM: int = 5;
			assume "No Create and delete pipe simultaneously": true -> not (CreatePipe.Valid = true and DeletePipe.Valid = true );
			assume "No subscribe and subscribe simultaneously": true -> 
			                       not (Subscribe.Valid = true and Unsubscribe.Valid = true );
			assume "No send and recv simultaneously": true -> 
			                       not (SendMsg.Valid = true and RcvMsg.Valid = true );
			 
			                        
			 
			                        
        	guarantee "if CreatePipe appid >= PIPENUM,then BAD_ARGUMENT,else SUCCESS": true ->
        	if CreatePipe.Valid = true
        	then (if (CreatePipe.AppId >= PIPENUM or CreatePipe.Depth < 1) then CreatePipe.Result = BAD_ARGUMENT
        	  else CreatePipe.Result = SUCCESS 
        	)else true ;
        	
        	
        	
        	 
        	 
--          PipeId: in data port Base_Types::Unsigned_8;
--			AppId: in data port Base_Types::Unsigned_32;
--			Valid: in data port Base_Types::Boolean;
--			Result: out data port Base_Types::Unsigned_32;
            guarantee "if DeletePipe appid >= PIPENUM,then BAD_ARGUMENT,else SUCCESS": true ->
        	if DeletePipe.Valid = true
        	then (if (DeletePipe.AppId >= PIPENUM ) then DeletePipe.Result = BAD_ARGUMENT
        	  else DeletePipe.Result = SUCCESS 
        	)else true;
            
            
            eq MAX_MSGS_MET: int = 6;
			eq MAX_DESTS_MET: int = 7;
			eq BUF_ALOC_ERR: int = 8;
			
--			MsgId: in data port Base_Types::Unsigned_16;
--			PipeId: in data port Base_Types::Unsigned_8;
--			Valid: in data port Base_Types::Boolean;
--			Result: out data port Base_Types::Unsigned_32;
            
            --按照 消息-管道 的对应添加 路由 数据结构
            eq MAX_MSGID: int = 64;
            eq MAX_SUB_PER_MSG: int = 16;
            --留一个消息的数据结构没写，包含消息的当前被订阅数 MAX_DESTS_MET,,BUF_ALOC_ERR
            guarantee "if Subscribe pipeid >= PIPENUM or < 0,then BAD_ARGUMENT,else SUCCESS": true ->
            if Subscribe.Valid = true 
            then (if Subscribe.PipeId < 0 or Subscribe.PipeId > PIPENUM or 
            	Subscribe.MsgId < 0 
            	then Subscribe.Result = BAD_ARGUMENT
            	else (if Subscribe.MsgId > MAX_MSGID 
            		then  Subscribe.Result = MAX_MSGS_MET
            		else Subscribe.Result = SUCCESS
            	)
            )else true;
            
--          MsgId: in data port Base_Types::Unsigned_16;
--			PipeId: in data port Base_Types::Unsigned_8;
--			Valid: in data port Base_Types::Boolean;
--			Result: out data port Base_Types::Unsigned_32;
           --
           guarantee "if Unsubscribe pipeid >= PIPENUM or < 0,then BAD_ARGUMENT,else SUCCESS": true ->
            if Unsubscribe.Valid = true 
            then (if Unsubscribe.PipeId < 0 or Unsubscribe.PipeId > PIPENUM or 
            	Unsubscribe.MsgId < 0 or Unsubscribe.MsgId  > MAX_MSGID 
            	then 
            	   Unsubscribe.Result = BAD_ARGUMENT
            	else 
            	   Unsubscribe.Result = SUCCESS
            )else true;
            
            
--          Msg: in data port Data_SB::struct.CFE_SB_Msg_t;
--             MsgId: data Base_Types::Unsigned_16;
--			   EvtId: data Base_Types::Unsigned_16;
--			   Content: data Base_Types::String;
--			Valid: in data port Base_Types::Boolean;
--			Result: out data port Base_Types::Unsigned_32;
            
            eq EVT_MSGID: int = 3;
            eq MAX_EVTID: int = 36;
            
            eq MSGID_VALID: bool = SendMsg.Msg.MsgId >= 0 and SendMsg.Msg.MsgId < MAX_MSGID;
            eq EVTID_VALID: bool = SendMsg.Msg.EvtId >= 0 and SendMsg.Msg.EvtId < MAX_EVTID;
            guarantee "if SendMsg arg is error then report else success " : true ->
            if SendMsg.Valid = true 
            then (if MSGID_VALID 
            	then (if ((EVTID_VALID and SendMsg.Msg.MsgId =  EVT_MSGID) or 
            		not (EVTID_VALID and SendMsg.Msg.MsgId <>  EVT_MSGID))
            		then SendMsg.Result = SUCCESS
            		else SendMsg.Result = BAD_ARGUMENT
            	)else SendMsg.Result = BAD_ARGUMENT
            )else true;
            
--          PipeId: in data port Base_Types::Unsigned_8;
--			TimeOut: in data port Base_Types::Integer_32;
--			Msg: out data port Data_SB::struct.CFE_SB_Msg_t;
--			Valid: in data port Base_Types::Boolean;
--			Result: out data port Base_Types::Unsigned_32;
--          SB_API.RcvMsg.Result = SUCCESS or 
--			SB_API.RcvMsg.Result = BAD_ARGUMENT or 
--			SB_API.RcvMsg.Result = NO_MESSAGE or 
--			SB_API.RcvMsg.Result = TIME_OUT or 
--			SB_API.RcvMsg.Result = PIPE_RD_ERR;	

            eq RCV_PIPEID_VALID: bool = RcvMsg.PipeId >= 0 and  RcvMsg.PipeId < PIPENUM;
            guarantee "if RcvMsg arg is error then report else success " : true ->
            if RcvMsg.Valid = true 
            then (if RCV_PIPEID_VALID 
            	then RcvMsg.Result = SUCCESS
                else RcvMsg.Result = BAD_ARGUMENT
            	)
            else true;
            
            eq es_sub_msg1 : bool = false -> 
            if( 
            (pre(es_sub_msg1) = true and  
             ( Unsubscribe.Valid = true and Unsubscribe.MsgId = 1 and Unsubscribe.PipeId = 0)
            )
            or
            ( pre(es_sub_msg1) = false and 
              not(Subscribe.Valid = true and Subscribe.MsgId = 1 and Subscribe.PipeId = 0)  
            )
            )
            then  false
            else  true;
            
            guarantee "if es sub msg1, then es receive msg1": true ->
               if es_sub_msg1 and SendMsg.Valid = true and SendMsg.Msg.MsgId = 1 and SendMsg.Result = SUCCESS
               then  es_pipe.MsgId = 1
               else true;
        **};
         
         
	end sb_lib;

	abstract implementation sb_lib.impl
		subcomponents
--			func: abstract lib_func;
			CreatePipe_t: abstract sb_controller::CreatePipe;
			DeletePipe_t: abstract sb_controller::DeletePipe;
			Subscribe_t: abstract sb_controller::Subscribe;
			Unsubscribe_t: abstract sb_controller::Unsubscribe;
			SendMsg_t: abstract sb_controller::SendMsg;
			RcvMsg_t: abstract sb_controller::RcvMsg;
			ShareData: abstract shareData::ShareData;
--			es_pipe: data Data_SB::struct.CFE_SB_PipeD_t; --PipeId = 0
--			sb_pipe: data Data_SB::struct.CFE_SB_PipeD_t; --PipeId = 1
--			evs_pipe: data Data_SB::struct.CFE_SB_PipeD_t; --PipeId = 2
--			time_pipe: data Data_SB::struct.CFE_SB_PipeD_t; --PipeId = 3
--			app1_pipe: data Data_SB::struct.CFE_SB_PipeD_t; --PipeId = 4
				--按照 消息-管道 的对应添加 路由 数据结构
--		 annex agree {**
--            lemma "": app1_pipe.InUse = true;
--        **};
		connections
--			func_RcvMsg: feature group port_struct::RcvMsg <-> func.RcvMsg;
--			func_CreatePipe: feature group port_struct::CreatePipe <-> func.CreatePipe;
--			func_DeletePipe: feature group port_struct::DeletePipe <-> func.DeletePipe;
--			func_Subscribe: feature group port_struct::Subscribe <-> func.Subscribe;
--			func_Unsubscribe: feature group port_struct::Unsubscribe <-> func.Unsubscribe;
--			func_SendMsg: feature group port_struct::SendMsg <-> func.SendMsg;
--			es_pipe_c: port func.es_pipe -> es_pipe;
--			sb_pipe_c: port func.sb_pipe -> sb_pipe;
--			app1_pipe_c: port func.app1_pipe -> app1_pipe;
--			time_pipe_c: port func.time_pipe -> time_pipe;
--			evs_pipe_c: port func.evs_pipe -> evs_pipe;
			DeletePipe_p: feature group  DeletePipe <-> DeletePipe_t.Param;
			RcvMsg_p: feature group  RcvMsg <-> RcvMsg_t.Param;
			CreatePipe_p: feature group  CreatePipe <-> CreatePipe_t.Param;
			Subscribe_p: feature group  Subscribe <-> Subscribe_t.Param;
			Unsubscribe_p: feature group  Unsubscribe <-> Unsubscribe_t.Param;
			SendMsg_p: feature group  SendMsg <-> SendMsg_t.Param;
			
			 
			DeletePipe_p1: feature group  ShareData.DeletePipe <-> DeletePipe_t.cmd;
			RcvMsg_p1: feature group  ShareData.RcvMsg <-> RcvMsg_t.cmd;
			CreatePipe_p1: feature group  ShareData.CreatePipe <-> CreatePipe_t.cmd;
			Subscribe_p1: feature group  ShareData.Subscribe <-> Subscribe_t.cmd;
			Unsubscribe_p1: feature group  ShareData.Unsubscribe <-> Unsubscribe_t.cmd;
			SendMsg_p1: feature group  ShareData.SendMsg <-> SendMsg_t.cmd;
			
			
--			CreatePipe_pr: feature group  CreatePipe_t.PipeRead <-> ShareData.PipeRead;
--			Unsubscribe_pr: feature group  Unsubscribe_t.PipeRead <-> ShareData.PipeRead;
--			SendMsg_pr: feature group  SendMsg_t.PipeRead <-> ShareData.PipeRead;
--			DeletePipe_pr: feature group  DeletePipe_t.PipeRead <-> ShareData.PipeRead;
--			Subscribe_pr: feature group  Subscribe_t.PipeRead <-> ShareData.PipeRead;
--			RcvMsg_pr: feature group  RcvMsg_t.PipeRead <-> ShareData.PipeRead;
--			Unsubscribe_rr: feature group  Unsubscribe_t.RouteRead <-> ShareData.RouteRead;
--			SendMsg_rr: feature group  SendMsg_t.RouteRead <-> ShareData.RouteRead;
--			Subscribe_rr: feature group  Subscribe_t.RouteRead <-> ShareData.RouteRead;
			
			evs_pipe_c: port ShareData.evs_pipe -> evs_pipe;
			app1_pipe_c: port ShareData.app1_pipe -> app1_pipe;
			es_pipe_c: port ShareData.es_pipe -> es_pipe;
			sb_pipe_c: port ShareData.sb_pipe -> sb_pipe;
			time_pipe_c: port ShareData.time_pipe -> time_pipe;
	end sb_lib.impl;


end Lib_SB;