package Lib_ES
public
	with Base_Types;

	with Data_ES;

--	with Lib;
	
	feature group es_api_provide
		features
			RegisterApp: feature group Lib_RegisterApp;
			RestartApp: feature group Lib_RestartApp;
			DeleteApp: feature group Lib_DeleteApp;
	end es_api_provide;
	
	feature group es_api_require
		features
			RegisterApp: feature group Com_RegisterApp;
			RestartApp: feature group Com_RestartApp;
			DeleteApp: feature group Com_DeleteApp;
	inverse of es_api_provide
	end es_api_require;

	thread es_lib
		features
			RegisterApp: feature group Lib_RegisterApp;
			RestartApp: feature group Lib_RestartApp;
			DeleteApp: feature group Lib_DeleteApp;
			app1_task_state: out data port Data_ES::struct.CFE_ES_TaskRecord_t;
			app1_app_state: out data port Data_ES::struct.CFE_ES_AppRecord_t;
		
		annex agree{**
			
			guarantee "": RestartApp.Result = 1;
			--0: running 1: restart 2: waiting 关于staterecord代表哪个app，
			--在lib中进行处理识别是哪个数据字段，然后直接返回处理结果
			eq SUCCESS: int = 0;
			eq ERR_APPID: int = 1;
			
			eq app_running : bool = (app1_app_state.StateRecord.AppState = 0);
			eq app_restart: bool = (app1_app_state.StateRecord.AppState = 1);
			eq app_wait : bool = (app1_app_state.StateRecord.AppState = 2);
			guarantee "if restart core, then return error" :true->
			RestartApp.Valid = true and RestartApp.AppId < 4 =>  
			RestartApp.Result = ERR_APPID;
			guarantee "if appid is valid and app is running, then restart it ":true ->
			    if (RestartApp.Valid = true 
			    and RestartApp.AppId > 3 
			    and RestartApp.AppId < 32 
			    and pre(app_running)) 
			    then 
			    app_restart and RestartApp.Result = SUCCESS
			    else 
			    RestartApp.Result = ERR_APPID;
		   guarantee "initial op is done at first,  ":
		        app1_app_state.StateRecord.AppState = 0 ->
			    RestartApp.Valid = false and  
			    DeleteApp.Valid = false   =>
			    app1_app_state.StateRecord.AppState = pre( app1_app_state.StateRecord.AppState );
			    
		   guarantee "if appid is valid and app is running, then delete it ": true ->
		   if (DeleteApp.Valid = true
		   and DeleteApp.AppId > 3 
		   and DeleteApp.AppId < 32 
		   and pre(app_running) 
		   ) then 
		        app_wait and DeleteApp.Result = SUCCESS
		   else 
			    DeleteApp.Result = ERR_APPID;
		**};
	end es_lib;

	thread implementation es_lib.impl
		subcomponents
			es_task: data Data_ES::struct.CFE_ES_TaskRecord_t;		--task info of es
			sb_task: data Data_ES::struct.CFE_ES_TaskRecord_t;		--task info of sb
			evs_task: data Data_ES::struct.CFE_ES_TaskRecord_t;		--task info of evs
			time_task: data Data_ES::struct.CFE_ES_TaskRecord_t;	--task info of time
			es_app: data Data_ES::struct.CFE_ES_AppRecord_t;		--app info of es
			sb_app: data Data_ES::struct.CFE_ES_AppRecord_t;		--app info of sb
			evs_app: data Data_ES::struct.CFE_ES_AppRecord_t;		--app info of evs
			time_app: data Data_ES::struct.CFE_ES_AppRecord_t;		--app info of time
	end es_lib.impl;

--------------------------------------------------------------------------
------------------------------RegisterApp---------------------------------
--TaskId	|	Result
--[0-31]	-> 0
--other		-> (int32)0xc4000017
--------------------------------------------------------------------------
	feature group Lib_RegisterApp
		features
			TaskId: in data port Base_Types::Unsigned_32;
			Valid: in data port Base_Types::Boolean;
			Result: out data port Base_Types::Unsigned_32;
	end Lib_RegisterApp;

	feature group Com_RegisterApp
		features
			TaskId: out data port Base_Types::Unsigned_32;
			Valid: out data port Base_Types::Boolean;
			Result: in data port Base_Types::Unsigned_32;
	inverse of Lib_RegisterApp
	end Com_RegisterApp;
--------------------------------------------------------------------------
------------------------------RestartApp----------------------------------
--AppId			AppType		AppState	|	Result
--[0-31]	&	[^1]	&	[^1]		->	0
--other			other		other		->	(int32)0xc4000001
--------------------------------------------------------------------------
	feature group Lib_RestartApp
		features
			AppId: in data port Base_Types::Unsigned_32;
			Valid: in data port Base_Types::Boolean;
			Result: out data port Base_Types::Unsigned_32;
--			StateRecord: out data port Data_ES::struct.CFE_ES_AppState_t;
	end Lib_RestartApp;

	feature group Com_RestartApp
		features
			AppId: out data port Base_Types::Unsigned_32;
			Valid: out data port Base_Types::Boolean;
			Result: in data port Base_Types::Unsigned_32;
--			StateRecord: in data port Data_ES::struct.CFE_ES_AppState_t;
	inverse of Lib_RestartApp
	end Com_RestartApp;
--------------------------------------------------------------------------
------------------------------DeleteApp-----------------------------------
--AppId			AppType		AppState	|	Result
--[0-31]	&	[^1]	&	[^1]		->	0
--other			other		other		->	(int32)0xc4000001
--------------------------------------------------------------------------
	feature group Lib_DeleteApp
		features
			AppId: in data port Base_Types::Unsigned_32;
			Valid: in data port Base_Types::Boolean;
			Result: out data port Base_Types::Unsigned_32;
--			AppType: in data port Base_Types::Unsigned_32;
--			StateRecord: in data port Data_ES::struct.CFE_ES_AppState_t;
--			
--			NewStateRecord: out data port Data_ES::struct.CFE_ES_AppState_t;
	end Lib_DeleteApp;

	feature group Com_DeleteApp
		features
			AppId: out data port Base_Types::Unsigned_32;
			Valid: out data port Base_Types::Boolean;
			Result: in data port Base_Types::Unsigned_32;
--			AppType: out data port Base_Types::Unsigned_32;
--			StateRecord: out data port Data_ES::struct.CFE_ES_AppState_t;
--			
--			NewStateRecord: in data port Data_ES::struct.CFE_ES_AppState_t;
	inverse of Lib_DeleteApp
	end Com_DeleteApp;
end Lib_ES;