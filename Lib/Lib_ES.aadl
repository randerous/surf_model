package Lib_ES
public
	with Base_Types;

	with Data_ES;

	with Lib;

	thread es_lib
		features
			RegisterApp: feature group Lib_RegisterApp;
			RestartApp: feature group Lib_RestartApp;
			DeleteApp: feature group Lib_DeleteApp;
			app1_task_state: out data port Data_ES::struct.CFE_ES_TaskRecord_t;
			app1_app_state: out data port Data_ES::struct.CFE_ES_AppRecord_t;
            a: out data port Base_Types::boolean;
			
		annex agree{**
			guarantee "":  a=false;
			guarantee "": RestartApp.Result = 1;
			--0: running 1: restart  关于staterecord代表哪个app，
			--在lib中进行处理识别是哪个数据字段，然后直接返回处理结果
			eq SUCCESS: int = 0;
			eq ERR_APPID: int = 1;
			
			eq app_running : bool = (app1_app_state.StateRecord.AppState = 0);
			eq app_restart: bool = (app1_app_state.StateRecord.AppState = 1);
			guarantee "" :true-> RestartApp.AppId < 4 =>  RestartApp.Result = ERR_APPID;
			guarantee " ":true ->
			    if (RestartApp.Valid = true 
			    and RestartApp.AppId > 3 
			    and RestartApp.AppId < 32 
			    and pre(app_running)) 
			    then 
			    app_restart and RestartApp.Result = SUCCESS
			    else 
			    RestartApp.Result = ERR_APPID;
		   guarantee "initial op is done at first  ":
		        app1_app_state.StateRecord.AppState = 0 ->
			    RestartApp.Valid = false =>
			    app1_app_state.StateRecord.AppState = pre( app1_app_state.StateRecord.AppState );
		**};
	end es_lib;

	thread implementation es_lib.impl
		subcomponents
			es_task: data Data_ES::struct.CFE_ES_TaskRecord_t;
			sb_task: data Data_ES::struct.CFE_ES_TaskRecord_t;
			evs_task: data Data_ES::struct.CFE_ES_TaskRecord_t;
			time_task: data Data_ES::struct.CFE_ES_TaskRecord_t;
			es_app:  data Data_ES::struct.CFE_ES_AppRecord_t;
			sb_app: data Data_ES::struct.CFE_ES_AppRecord_t;
			evs_app: data Data_ES::struct.CFE_ES_AppRecord_t;
			time_app: data Data_ES::struct.CFE_ES_AppRecord_t;
			
			
		annex agree{**
			--0: running 1: restart  关于staterecord代表哪个app，
			--在lib中进行处理识别是哪个数据字段，然后直接返回处理结果
			
			--guarantee "": RestartApp.Valid = true => RestartApp.Result = SUCCESS or RestartApp.Result = ERR_APPID;
			
			  
		**};
	end es_lib.impl;

--------------------------------------------------------------------------
------------------------------RegisterApp---------------------------------
--------------------------------------------------------------------------
	feature group Lib_RegisterApp extends Lib::LibPort
		features
			TaskId: in data port Base_Types::Unsigned_32;
	end Lib_RegisterApp;

	feature group Com_RegisterApp extends Lib::ComPort
		features
			TaskId: out data port Base_Types::Unsigned_32;
	inverse of Lib_RegisterApp
	end Com_RegisterApp;
--------------------------------------------------------------------------
------------------------------RestartApp----------------------------------
--------------------------------------------------------------------------
	feature group Lib_RestartApp 
		features
			AppId: in data port Base_Types::Unsigned_32;
			Valid: in data port Base_Types::boolean;
			Result: out data port Base_Types::Unsigned_32; -- 0 表示成功， 1表示失败，
	end Lib_RestartApp;

	feature group Com_RestartApp
		features
			AppId: out data port Base_Types::Unsigned_32;
			Valid: out data port Base_Types::boolean;
			Result: in data port Base_Types::Unsigned_32; -- 0 表示成功， 1表示失败，
	inverse of Lib_RestartApp
	end Com_RestartApp;

--------------------------------------------------------------------------
------------------------------DeleteApp-----------------------------------
--------------------------------------------------------------------------
	feature group Lib_DeleteApp extends Lib::LibPort
		features
			AppId: in data port Base_Types::Unsigned_32;
	end Lib_DeleteApp;

	feature group Com_DeleteApp extends Lib::ComPort
		features
			TaskId: out data port Base_Types::Unsigned_32;
	inverse of Lib_DeleteApp
	end Com_DeleteApp;
end Lib_ES;